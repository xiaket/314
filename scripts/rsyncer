#!/usr/bin/env python3
import copy
import errno
import functools
import logging
import os
import shlex
import subprocess
import sys

import yaml

CONF = os.path.expanduser("~/rsyncer.yml")
LOCK = os.path.expanduser("~/rsyncer.lock")

logging.basicConfig(
    filename=os.path.expanduser("~/rsyncer.log"),
    format="[%(pid)s]%(asctime)s: %(message)s",
    level=logging.DEBUG,
)

log = functools.partial(logging.info, extra={'pid': os.getpid()})


class Rsync:
    def lock(self):
        try:
            self.fd = os.open(LOCK, os.O_CREAT|os.O_EXCL|os.O_RDWR)
            log("Acquired Lock.")
        except OSError as err:
            if err.errno != errno.EEXIST:
                raise
            log("Lock exists, exiting.")
            sys.exit(0)

    def unlock(self):
        log("Removing lock")
        os.close(self.fd)
        os.remove(LOCK)
        log("Removed lock")

    def read(self):
        if not os.path.isfile(CONF):
            log("Empty configuration.")
            sys.exit(0)
        with open(CONF) as fobj:
            conf = yaml.load(fobj, Loader=yaml.SafeLoader)
            log("Loaded configuration: %s", conf)
        self.destinations = conf["destinations"]
        self.queue = conf["queue"]

    def remove(self, line):
        """Remove a line from queue"""
        self.read()
        self.queue.remove(line)
        self.write()

    def write(self):
        data = {"destinations": self.destinations, "queue": self.queue}
        log("Saving configuration: %s", data)
        with open(CONF, 'w') as fobj:
            conf = yaml.dump(data, fobj)
        log("Saved configuration: %s", data)

    def download(self, target, item):
        command = [
            "rsync",
            "--progress",
            "--bwlimit",
            "1250",
            "--partial",
            "--exclude='*.part'",
            "-av",
            "-e",
            "ssh",
            "xiaket.org:/transmission/downloads/%s" % shlex.quote(item),
            ".",
        ]
        log("Running rsync: %s", " ".join(command))
        try:
            subprocess.run(command, cwd=self.destinations[target])
        except:
            self.unlock()
            sys.exit(1)
        log("Downloaded %s: %s", target, item)

    def main(self):
        self.lock()
        self.read()
        for line in copy.deepcopy(self.queue):
            item, target = line.rsplit(":", 1)
            self.download(target, item)
            self.remove(line)
        self.unlock()


if __name__ == "__main__":
    rsync = Rsync()
    rsync.main()
